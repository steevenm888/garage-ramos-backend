'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var Immutable = _interopRequireWildcard(_immutable);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _castFilemap = require('./castFilemap');

var _castFilemap2 = _interopRequireDefault(_castFilemap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Find out the differences between two filemaps.
 */

const diff = (_input, _output) => {
  const input = (0, _castFilemap2.default)(_input);
  const output = (0, _castFilemap2.default)(_output);

  const inputKeys = Immutable.Set.fromKeys(input.toJS());
  const outputKeys = Immutable.Set.fromKeys(output.toJS());

  // start with a blank map
  let changes = Immutable.Map();

  // include any output files that are newly created/modified
  for (const outputKey of outputKeys) {
    const outputValue = output.get(outputKey);
    const inputValue = input.get(outputKey);

    (0, _invariant2.default)(outputValue, 'outputKey is known to exist in output filemap');

    if (!inputValue || !outputValue.equals(inputValue)) {
      changes = changes.set(outputKey, outputValue);
    }
  }

  // add nulls to indicate deleted files
  for (const inputKey of inputKeys) {
    if (!output.has(inputKey)) changes = changes.set(inputKey, null);
  }

  return changes;
};

exports.default = diff;