'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mkdirpPromise = require('mkdirp-promise');

var _mkdirpPromise2 = _interopRequireDefault(_mkdirpPromise);

var _tempy = require('tempy');

var _tempy2 = _interopRequireDefault(_tempy);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _Directory = require('./Directory');

var _Directory2 = _interopRequireDefault(_Directory);

var _singleFile = require('./singleFile');

var _singleFile2 = _interopRequireDefault(_singleFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const tmp = callback => {
  const tmpDir = _tempy2.default.directory();
  const inputPath = _path2.default.join(tmpDir, 'input');
  const outputPath = _path2.default.join(tmpDir, 'output');

  let initialised = false;

  const inputDir = new _Directory2.default(inputPath, { force: true });
  const outputDir = new _Directory2.default(outputPath, { force: true });

  return (0, _singleFile2.default)(async files => {
    if (!initialised) {
      initialised = true;
      await Promise.all([(0, _mkdirpPromise2.default)(inputPath), (0, _mkdirpPromise2.default)(outputPath)]);
    }

    await inputDir.write(files);

    await callback(inputPath, outputPath);

    return outputDir.read();
  });
};

/**
 * Creates a transform that allows your callback to modify files on disk. Good for wiring up CLI
 * tools that expect to work on real files on disk.
 *
 * Important: your callback must not modify anything in the input directory, or you will have
 * unpredictable results on subsequent calls to your transform.
 */

exports.default = tmp;