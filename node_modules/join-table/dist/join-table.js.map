{"version":3,"sources":["../src/join-table.js"],"names":["privates","WeakMap","getPrivates","instance","p","get","Error","JoinTable","constructor","set","size","lefts","rights","value","clear","length","has","left","right","i","add","delete","finalIndex","getLeftsFor","results","Set","getRightsFor","getLefts","getRights","inspect","Symbol","iterator","index","next","done","result"],"mappings":"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","file":"join-table.js","sourcesContent":["// @flow\n\nconst privates: WeakMap<JoinTable, PrivateMembers> = new WeakMap(); // eslint-disable-line no-use-before-define, max-len\n\ntype PrivateMembers = {\n  size: number,\n  lefts: mixed[],\n  rights: mixed[],\n};\n\nconst getPrivates = (instance: JoinTable) => { // eslint-disable-line no-use-before-define\n  const p = privates.get(instance);\n  if (!p) throw new Error('Instance does not exist');\n  return p;\n};\n\nexport default class JoinTable {\n  constructor() {\n    privates.set(this, {\n      size: 0,\n      lefts: [],\n      rights: [],\n    });\n  }\n\n  /**\n   * How many joins are in the table.\n   */\n  get size(): number {\n    return getPrivates(this).size;\n  }\n\n  /**\n   * Disallow overwriting the size property.\n   */\n  set size(value: any): void { // eslint-disable-line no-unused-vars, class-methods-use-this\n    throw new Error('JoinTable: size property is not writable');\n  }\n\n  /**\n   * Empties the table.\n   */\n  clear(): void {\n    const p = getPrivates(this);\n    p.size = 0;\n    p.lefts.length = 0;\n    p.rights.length = 0;\n  }\n\n  /**\n   * Finds out if a given join exists.\n   */\n  has(left: mixed, right: mixed): boolean {\n    const { lefts, rights, size } = getPrivates(this);\n\n    for (let i = 0; i < size; i += 1) {\n      if (lefts[i] === left && rights[i] === right) return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Adds a new join. (Has no effect if the join already exists.)\n   */\n  add(left: mixed, right: mixed): this {\n    const p = getPrivates(this);\n\n    const { lefts, rights, size } = p;\n\n    // if this join already exists, do nothing\n    for (let i = 0; i < size; i += 1) {\n      if (lefts[i] === left && rights[i] === right) return this;\n    }\n\n    // add the new join\n    lefts[size] = left;\n    rights[size] = right;\n    p.size += 1;\n\n    return this;\n  }\n\n  /**\n   * Removes a join from the table.\n   * (Has no effect if the join does not exist.)\n   */\n  delete(left: mixed, right: mixed): boolean {\n    const p = getPrivates(this);\n\n    const { lefts, rights, size } = p;\n\n    for (let i = 0; i < size; i += 1) {\n      if (lefts[i] === left && rights[i] === right) {\n        // fast method of deleting an item from an array\n        const finalIndex = size - 1;\n        lefts[i] = lefts[finalIndex];\n        rights[i] = rights[finalIndex];\n        lefts.length = finalIndex;\n        rights.length = finalIndex;\n        p.size = finalIndex;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Gets all 'lefts' associated with the given 'right'.\n   */\n  getLeftsFor(right: mixed): Set<mixed> {\n    const { lefts, rights, size } = getPrivates(this);\n\n    const results = new Set();\n\n    for (let i = 0; i < size; i += 1) {\n      if (rights[i] === right) results.add(lefts[i]);\n    }\n\n    return results;\n  }\n\n  /**\n   * Gets all 'rights' associated with the given 'left'.\n   */\n  getRightsFor(left: mixed): Set<mixed> {\n    const { lefts, rights, size } = getPrivates(this);\n\n    const results = new Set();\n\n    for (let i = 0; i < size; i += 1) {\n      if (lefts[i] === left) results.add(rights[i]);\n    }\n\n    return results;\n  }\n\n  /**\n   * Gets a set of all the lefts.\n   */\n  getLefts(): Set<mixed> {\n    return new Set(getPrivates(this).lefts);\n  }\n\n  /**\n   * Gets a set of all the rights.\n   */\n  getRights(): Set<mixed> {\n    return new Set(getPrivates(this).rights);\n  }\n\n  /**\n   * Returns a string (works with console.log() etc.)\n   */\n  inspect(): string {\n    return `JoinTable[${getPrivates(this).size} joins]`;\n  }\n\n  /**\n   * Each iteration receives a two-item array in the form `[left, right]`.\n   */\n  // $FlowFixMe: computed props not supported\n  [Symbol.iterator]() {\n    const { lefts, rights, size } = getPrivates(this);\n\n    const finalIndex = size - 1;\n    let index = 0;\n\n    return {\n      next: () => {\n        if (index > finalIndex) return { done: true };\n\n        const result = {\n          value: [\n            lefts[index],\n            rights[index],\n          ],\n        };\n\n        index += 1;\n\n        return result;\n      },\n    };\n  }\n}\n"]}